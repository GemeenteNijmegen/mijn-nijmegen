import * as path from 'path';
import { aws_lambda as Lambda, aws_dynamodb, aws_ssm as SSM, RemovalPolicy, Duration } from 'aws-cdk-lib';
import { Alarm } from 'aws-cdk-lib/aws-cloudwatch';
import { Role } from 'aws-cdk-lib/aws-iam';
import { FilterPattern, IFilterPattern, MetricFilter, RetentionDays } from 'aws-cdk-lib/aws-logs';
import { Construct } from 'constructs';
import { LambdaReadOnlyPolicy } from './iam/lambda-readonly-policy';
import { Statics } from './statics';

export interface ApiFunctionProps {
  description: string;
  codePath: string;
  table: aws_dynamodb.ITable;
  tablePermissions: string;
  applicationUrlBase?: string;
  environment?: {[key: string]: string};
  monitorFilterPattern?: IFilterPattern;
  readOnlyRole: Role;
}

export class ApiFunction extends Construct {
  lambda: Lambda.Function;
  constructor(scope: Construct, id: string, props: ApiFunctionProps) {
    super(scope, id);
    // See https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Lambda-Insights-extension-versionsx86-64.html
    const insightsArn = 'arn:aws:lambda:eu-west-1:580247275435:layer:LambdaInsightsExtension:16';
    this.lambda = new Lambda.Function(this, 'lambda', {
      runtime: Lambda.Runtime.NODEJS_14_X,
      memorySize: 512,
      handler: 'index.handler',
      description: props.description,
      code: Lambda.Code.fromAsset(path.join(__dirname, props.codePath)),
      insightsVersion: Lambda.LambdaInsightsVersion.fromInsightVersionArn(insightsArn),
      logRetention: RetentionDays.ONE_MONTH,
      environment: {
        APPLICATION_URL_BASE: props.applicationUrlBase || '',
        AUTH_URL_BASE: SSM.StringParameter.valueForStringParameter(this, Statics.ssmAuthUrlBaseParameter),
        OIDC_CLIENT_ID: SSM.StringParameter.valueForStringParameter(this, Statics.ssmOIDCClientID),
        OIDC_SCOPE: SSM.StringParameter.valueForStringParameter(this, Statics.ssmOIDCScope),
        SESSION_TABLE: props.table.tableName,
        ...props.environment,
      },
    });
    props.table.grantReadWriteData(this.lambda.grantPrincipal);

    this.monitor(props.monitorFilterPattern);
    this.allowAccessToReadOnlyRole(props.readOnlyRole);
  }

  /**
   * Monitor the logs generated by this function for a filter pattern, generate metric
   * and alarm on increased error rate.
   *
   * @param monitoredBy Lambda function responsible for monitoring this function
   * @param filterPattern Pattern to filter by (default: containing ERROR)
   */
  private monitor(filterPattern?: IFilterPattern) {
    const filter = new MetricFilter(this, 'MetricFilter', {
      logGroup: this.lambda.logGroup,
      metricNamespace: `${Statics.projectName}/${this.node.id}`,
      metricName: 'Errors',
      filterPattern: filterPattern ?? FilterPattern.anyTerm('ERROR'),
      metricValue: '1',
    });
    filter.applyRemovalPolicy(RemovalPolicy.DESTROY);

    const alarm = new Alarm(this, `${Statics.projectName}-${this.node.id}-alarm`, {
      metric: filter.metric({
        statistic: 'sum',
        period: Duration.minutes(5),
      }),
      evaluationPeriods: 3,
      threshold: 5,
      alarmName: `Increased error rate for ${this.node.id}`,
      alarmDescription: `This alarm triggers if the function ${this.node.id} is logging more than 5 errors over n minutes.`,
    });
    alarm.applyRemovalPolicy(RemovalPolicy.DESTROY);

  }

  private allowAccessToReadOnlyRole(role: Role) {
    role.addManagedPolicy(
      new LambdaReadOnlyPolicy(this, 'read-policy', {
        functionArn: this.lambda.functionArn,
        logGroupArn: this.lambda.logGroup.logGroupArn,
      }),
    );
  }
}
